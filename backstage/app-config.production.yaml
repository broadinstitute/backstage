---
app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: ${BACKSTAGE_APPLICATION_BASE_URL}

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  baseUrl: ${BACKSTAGE_APPLICATION_BASE_URL}
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen: ':7007'

  cors:
    origin: ${BACKSTAGE_APPLICATION_BASE_URL}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true

  reading:
    allow:
      - host: 'raw.githubusercontent.com'

  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      # password: ${POSTGRES_PASSWORD} # Not needed when using a service account
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt

techdocs:
  builder: 'local'  # Alternatives - 'external'
  generator:
    runIn: 'local'  # Alternatives - 'local'
  publisher:
    type: 'googleGcs'
    googleGcs:
      bucketName: ${TECHDOCS_STORAGE_BUCKET}
auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: ${NODE_ENV}
  providers:
    google:
      development:
        clientId:
          $file: ./secrets/auth-google-client-id
        clientSecret:
          $file: ./secrets/auth-google-client-secret
        signIn:
          resolvers:
      production:
        clientId:
          $file: ./secrets/auth-google-client-id
        clientSecret:
          $file: ./secrets/auth-google-client-secret
        signIn:
          resolvers:
 #           - resolver: emailMatchingUserEntityProfileEmail
    github:
      development:
        clientId:
          $file: ./secrets/auth-github-client-id
        clientSecret:
          $file: ./secrets/auth-github-client-secret
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName

      production:
        clientId:
          $file: ./secrets/auth-github-client-id
        clientSecret:
          $file: ./secrets/auth-github-client-secret
        signIn:
          resolvers:
          - resolver: usernameMatchingUserEntityName

catalog:
  # Overrides the default list locations from app-config.yaml as these contain example data.
  # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
  # on how to get entities into the catalog.
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    - type: file
      target: ../../templates/BITS/domains.yaml
      rules:
        - allow: [Location, Domain]

    - type: file
      target: ../../templates/BITS/systems.yaml
      rules:
        - allow: [Location, System]

    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/pr-with-catalog-entry/template.yaml"
      rules:
        - allow: [Template]

    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/terraform-control-module/template.yaml"
      rules:
        - allow: [Template]

    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/terraform-with-terragrunt/template.yaml"
      rules:
        - allow: [Template]

    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/terraform-storage-transfer/template.yaml"
      rules:
        - allow: [Template]

    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/terraform-cloud-run/template.yaml"
      rules:
        - allow: [Template]

    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/python-package/template.yaml"
      rules:
        - allow: [Template]

    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/add-spack-package/template.yaml"
      rules:
        - allow: [Template]
    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/add-namespace/template.yaml"
      rules:
        - allow: [Template]
    - type: url
      target: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/templates/scaffolder/add-repo/template.yaml"
      rules:
        - allow: [Template]

  providers:
    githubOrg:
      - id: production
        githubUrl: https://github.com
        orgs: ['broadinstitute']
        schedule:
          initialDelay: PT30S
          frequency: PT1H
          timeout: PT5M
    github:
      # the provider ID can be any camelCase string
      providerId:
        organization: 'broadinstitute'  # string
        catalogPath: '/catalog-info.yaml'  # string
        validateLocationsExist: true
        filters:
          branch: 'main'  # string
          repository: '.*'  # Regex
        schedule:  # same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: PT30M
          # supports ISO duration, "human duration" as used in code
          timeout: PT3M
      importDSP:
        organization: 'broadinstitute'  # string
        catalogPath: '/foundation.yaml'  # string
        validateLocationsExist: true
        filters:
          branch: 'main'  # string
          repository: '.*'  # Regex
        schedule:  # same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: PT90M
          # supports ISO duration, "human duration" as used in code
          timeout: PT3M
pagerDuty:
  oauth:
    clientId:
      $file: ./secrets/pagerduty-client-id
    clientSecret:
      $file: ./secrets/pagerduty-client-secret
    subDomain: ${PD_ACCOUNT_SUBDOMAIN}

integrations:
  github:
    - host: github.com
      apps:
        - $include: ./secrets/github-app-backstage-bits-credentials.yaml

techRadar:
  url: "https://github.com/broadinstitute/backstage/blob/${BRANCH_NAME}/backstage/plugin-configs/tech-radar.json"

spotify:
  licenseKey:
    $file: ./secrets/backstage-license-key
  # For Backstage Insights
  apiToken:
    $file: ./secrets/backstage-insights-token

backstageInsights:
  # Only collect insights from production Backstage
  # hostFilter: backstage.broadinstitute.org
  salt: YBUiwn7onVtvKd8CNhOt1+06fmOVCwje
  debug: false

skillExchange:
  hackUpdateNotificationsCron: '0 17 * * 1'
  slack:
    token:
      $file: ./secrets/backstage-skills-slack-bot-token
    appToken:
      $file: ./secrets/backstage-skills-slack-app-token
    signingSecret:
      $file: ./secrets/backstage-skills-slack-signing-secret
  defaultLists:
    files: # for local files
      - $include: ./plugin-configs/default-lists.yaml
    remoteUrls: # for remote files
      - https://backstage.spotify.com/docs/assets/files/default-skills-1b9f68a18ea48146f2f562bd9b3f4978.yaml

soundcheck:
  programs:
    $include: ./soundcheck-tracks.yaml
  results:
    history:
      enable: true
      retentionTimeInDays: 90
      cleanupFrequencyCron: '0 0 0 * * *'
      cleanupTimeoutInMinutes: 5
  certifications:
    history:
      enable: true
      retentionTimeInDays: 90
      cleanupFrequencyCron: '0 0 0 * * *'
      cleanupTimeoutInMinutes: 5
  slack:
    token:
      $file: ./secrets/backstage-soundcheck-slack-bot-token
    appToken:
      $file: ./secrets/backstage-soundcheck-slack-app-token
    signingSecret:
      $file: ./secrets/backstage-soundcheck-slack-signing-secret
  collectors:
    http:
      secrets:
        - key: githubApiToken
          value:
            $file: ./secrets/backstage-soundcheck-http-collector-token

permission:
  enabled: true
  permissionedPlugins:
    - catalog
    - scaffolder
    - soundcheck
    - backstage-insights
  rbac:
    authorizedUsers:
      - group:default/devnull
      - user:default/tfhartmann
      - user:default/lihu-zhong
      - user:default/coreone
      - user:default/hjfbynara
      - user:default/pssaluja
    fallbackPolicy:
      $include: ./plugin-configs/fallback-rbac-policy.yaml
    defaultPolicy:
      $include: ./plugin-configs/foundational-permission-policy.yaml
