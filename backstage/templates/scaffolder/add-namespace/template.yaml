---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: add-namespace
  title: "Add kubernetes namespace for your team"
  description: >-
    Create a new Pull Request to add a new namespace to the `bits-gke-clusters` Kubernetes environment.
    In addition to the namespace, the PR will add permissions for the namespace
    to the team's Google Group. The namespace will also have the ability to use
    [Config Connector](https://cloud.google.com/config-connector/docs/overview)
    to manage GCP resource directly from the kubernetes namespace. This allows
    users to define and manage GCP resources using Kubernetes manifests, providing
    a unified and declarative approach to infrastructure management. A Google Service Account
    will be created for you, and when granted roles in your project can be used to manage GCP
    resources.
  tags:
    - kubernetes
    - production

spec:
  owner: group:devnull
  type: service

  parameters:
    - title: Namespace Information & KCC Option
      required:
        - namespace
        - teams
        - owners
        - includeKcc # Make the new boolean parameter required
      properties:
        owners:
          title: 'GitHub Owners'
          type: string
          ui:field: GithubTeamPicker
          ui:autofocus: true
          description: >-
            ***GitHub team*** responsible for the namespace.
        namespace:
          title: Kubernetes Namespace
          type: string
          description: >-
            Namespace to create. Must be unique across the `bits-gke-clusters` Kubernetes environment.
        teams:
          title: 'Namespace Admins'
          type: array
          description: >-
            List of ***Google Groups*** to add to the namespace. At least one group is required.
            Please insure that your Google Group is added to the
            [gke-security-groups](https://groups.google.com/a/broadinstitute.org/g/gke-security-groups) group.
            More information can be found on the
            [Configure Google Groups for RBAC](https://cloud.google.com/kubernetes-engine/docs/how-to/google-groups-rbac#:~:text=Add%20your%20groups%20as%20nested%20groups%20to%20the%20gke%2Dsecurity%2Dgroups%20group.%20Don%27t%20add%20individual%20users%20as%20members%20of%20gke%2Dsecurity%2Dgroups.) page.
          items:
            type: string
            title: Google Groups
            pattern: '^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$'
            ui:help: 'Enter a valid Google Group email address'
            ui:hideError: true
            default: 'google-group@broadinstitute.org'
        includeKcc:
          title: Enable Google Cloud Config Connector (KCC)
          type: boolean
          description: >-
            Set up Config Connector for this namespace. This allows managing GCP resources
            (like service accounts, databases) directly from Kubernetes using the specified GCP Project.
            Enabling this feature will add additional cost to your namespace. 
          default: false
        gcpProject:
          title: 'Google Cloud Project (for KCC)'
          type: string
          description: >-
            The GCP Project ID where Config Connector will manage resources for this namespace.
            Required and used only if "Enable KCC" is checked.
      dependencies:
        includeKcc:
          oneOf:
            - properties:
                includeKcc:
                  const: true
              required:
                - gcpProject
            - properties:
                includeKcc:
                  const: false
  steps:
    - id: prepareNamespaceObject
      name: Prepare Namespace Object
      action: roadiehq:utils:jsonata
      input:
        data:
          namespaceName: ${{ parameters.namespace }}
          gcpProject: ${{ parameters.gcpProject }}
          includeKcc: ${{ parameters.includeKcc }}
        expression: |
          (
            $base := {
              "apiVersion": "v1",
              "kind": "Namespace",
              "metadata": {
                "name": $$.data.namespaceName
              }
            };
            $$.data.includeKcc and $$.data.gcpProject ? $merge([$base, {"metadata": {"annotations": {"cnrm.cloud.google.com/project-id": $$.data.gcpProject}}}]) : $base
          )
    - action: roadiehq:utils:serialize:yaml
      id: Namespace # ID remains 'Namespace' for dependent steps
      name: Serialize Namespace Object
      input:
        data: ${{ steps.prepareNamespaceObject.output.result }}

    - id: writeNamespace
      name: Write Namespace YAML File
      action: roadiehq:utils:fs:write
      input:
        path: manifests/namespace/${{ parameters.namespace }}/namespace.yaml
        content: ${{ steps.Namespace.output.serialized }}

    - id: parseRoleBinding
      name: Parse RoleBinding for Namespace Admins File
      action: roadiehq:utils:jsonata
      input:
        data:
          kind: RoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: namespace-admins
            namespace: ${{ parameters.namespace }}
          subjects:
            - kind: Group
              name: devnull@broadinstitute.org
          roleRef:
            kind: ClusterRole
            name: namespace-admin
            apiGroup: rbac.authorization.k8s.io
        expression: '$ ~> | $ | { "subjects":  $reduce($map($split("${{ parameters.teams }}", ","), function($v) { { "kind": "Group", "name": $v } }), $append, []) } |'

    - action: roadiehq:utils:serialize:yaml
      id: serializeRoleBinding
      name: Serialize RoleBinding for Namespace Admins
      input:
        data: ${{ steps.parseRoleBinding.output.result }}

    - id: writeRoleBinding
      name: Write Namespace Admin RoleBinding YAML File
      action: roadiehq:utils:fs:write
      input:
        path: manifests/namespace/${{ parameters.namespace }}/namespace-admin.yaml
        content: ${{ steps.serializeRoleBinding.output.serialized }}

    - action: roadiehq:utils:serialize:yaml
      id: ConfigConnectorContext
      name: Create Config Connector Context
      if: ${{ parameters.includeKcc }}
      input:
        data:
          apiVersion: core.cnrm.cloud.google.com/v1beta1
          kind: ConfigConnectorContext
          metadata:
            # you can only have one ConfigConnectorContext per namespace
            name: configconnectorcontext.core.cnrm.cloud.google.com
            namespace: ${{ parameters.namespace}}
          spec:
            googleServiceAccount: "${{ parameters.namespace }}@bits-gke-clusters.iam.gserviceaccount.com"
            stateIntoSpec: Absent

    - id: writeConfigConnectorContext
      name: Write Config Connector Context YAML File
      if: ${{ parameters.includeKcc }}
      action: roadiehq:utils:fs:write
      input:
        path: manifests/namespace/${{ parameters.namespace }}/configconnectorcontext.yaml
        content: ${{ steps.ConfigConnectorContext.output.serialized }}

    - action: roadiehq:utils:serialize:yaml
      id: IAMServiceAccount
      name: Create IAMServiceAccount KRM file
      if: ${{ parameters.includeKcc }}
      input:
        data:
          apiVersion: iam.cnrm.cloud.google.com/v1beta1
          kind: IAMServiceAccount
          metadata:
            namespace: mcp
            name: ${{ parameters.namespace }}
          spec:
            description: >-
              Managed Service Account create by Config Connector
              In the MCP Namespace

    - id: writeIAMServiceAccount
      name: Write IAMServiceAccount YAML File into the MCP Namespace
      if: ${{ parameters.includeKcc }}
      action: roadiehq:utils:fs:write
      input:
        path: manifests/namespace/mcp/serviceaccounts/${{ parameters.namespace }}/serviceaccount.yaml
        content: ${{ steps.IAMServiceAccount.output.serialized }}

    - action: roadiehq:utils:serialize:yaml
      id: workloadIdentityUser
      name: Create IAMPolicyMember token creator binding KRM file
      if: ${{ parameters.includeKcc }}
      input:
        data:
          apiVersion: iam.cnrm.cloud.google.com/v1beta1
          kind: IAMPolicyMember
          metadata:
            namespace: mcp
            name: ${{ parameters.namespace }}-workloadidentity-user
          spec:
            member: principal://iam.googleapis.com/projects/864716322442/locations/global/workloadIdentityPools/bits-gke-clusters.svc.id.goog/subject/ns/${{ parameters.namespace }}/sa/cnrm-system/cnrm-controller-manager
            resourceRef:
              kind: IAMServiceAccount
              name: ${{ parameters.namespace }}
            role: roles/iam.workloadIdentityUser

    - id: writeWorkloadIdentityUser
      name: Write IAMServiceAccount YAML File into the MCP Namespace
      if: ${{ parameters.includeKcc }}
      action: roadiehq:utils:fs:write
      input:
        path: manifests/namespace/mcp/serviceaccounts/${{ parameters.namespace }}/workload-identity-user.yaml
        content: ${{ steps.workloadIdentityUser.output.serialized }}

    - action: roadiehq:utils:serialize:yaml
      id: tokenCreator
      name: Create IAMPolicyMember token creator binding KRM file
      if: ${{ parameters.includeKcc }}
      input:
        data:
          apiVersion: iam.cnrm.cloud.google.com/v1beta1
          kind: IAMPolicyMember
          metadata:
            namespace: mcp
            name: ${{ parameters.namespace }}-serviceaccount-tokencreator
          spec:
            member: serviceAccount:bits-gke-clusters.svc.id.goog[cnrm-system/cnrm-controller-manager-${{ parameters.namespace }}]
            resourceRef:
              kind: IAMServiceAccount
              name: ${{ parameters.namespace }}
            role: roles/iam.serviceAccountTokenCreator

    - id: writeTokenCreator
      name: Write IAMServiceAccount YAML File into the MCP Namespace
      if: ${{ parameters.includeKcc }}
      action: roadiehq:utils:fs:write
      input:
        path: manifests/namespace/mcp/serviceaccounts/${{ parameters.namespace }}/serviceaccount-tokencreator.yaml
        content: ${{ steps.tokenCreator.output.serialized }}

    - action: fetch:plain:file
      id: fetchFile
      name: Fetch CODEOWNERS file
      input:
        url: https://github.com/broadinstitute/kubernetes-configs/blob/main/.github/CODEOWNERS
        targetPath: .github/CODEOWNERS

    - action: roadiehq:utils:fs:append
      id: appendCodeowners
      name: Append GitHub Team to CODEOWNERS file
      input:
        path: .github/CODEOWNERS
        content: |
          # ${{ parameters.namespace }} namespace
          /manifests/namespace/${{ parameters.namespace }}/* @broadinstitute/${{ parameters.owners }}

    - id: createPullRequest
      name: createPullRequest
      action: publish:github:pull-request
      input:
        repoUrl: 'github.com?repo=kubernetes-configs&owner=broadinstitute'
        branchName: add-${{ parameters.namespace }}-namespace
        title: 'feat: Add ${{ parameters.namespace }} Namespace for ${{ parameters.owners }}'
        description: >-
          This PR adds the ${{ parameters.namespace }} namespace to the Kubernetes cluster.
          On behalf of the ${{ parameters.owners }} team.
  output:
    links:
      - title: View the pull request on GitHub
        icon: github
        url: ${{ steps['createPullRequest'].output.remoteUrl }}
    text:
      - title: Namespace and KCC Status
        content: |
          Namespace `${{ parameters.namespace }}` files have been prepared.
          {% if parameters.includeKcc %}
          Google Cloud Config Connector (KCC) has been **enabled** for this namespace, targeting GCP project `${{ parameters.gcpProject }}`.
          A Google Service Account will be configured for KCC with the email:
          **${{ parameters.namespace }}@bits-gke-clusters.iam.gserviceaccount.com**
          You will be able to use this  service account to grant permissions in your GCP projects, allowing your
          Kubernetes workloads to access GCP resources using Config Connector once the Pull Request has been merged.
          To grant permissions, add IAM roles to this service account in your target GCP projects.
          {% else %}
          Google Cloud Config Connector (KCC) has been **disabled** for this namespace.
          No KCC-specific resources (like the dedicated Google Service Account for KCC) were created by this template.
          {% endif %}
