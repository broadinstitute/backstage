---
apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: terraform-control-module-template
  title: Terraform Control Module using a GCS Backend and Atlantis
  description: >-
    This template uses a "WET" approach, which involves organizing projects in a structured manner.
    Directories are used to divide different environments, and modifications to the code are implemented
    by duplicating files between directories. In this model, environment-specific data is kept in the
    `terraform.tfvars` file, while most other files remain identical. The template creates a new GitHub
    repository consisting of a Terraform project, a Backstage catalog entry, and configures Atlantis.
    Additionally, it sets the Google provider version and utilizes the shared GCS bucket for storing
    state information.

  tags:
    - terraform
    - production

spec:
  owner: group:devnull
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - $yaml: ../defaults/parameters/resource-info.yaml
    - $yaml: ../defaults/parameters/annotations.yaml
    - title: Github settings
      required:
        - githubTeam
        - repoUrl
      properties:
        githubTeam:
          title: GitHub Team
          type: string
          ui:field: OwnerPicker
          description: The GitHub team that owns the repository.
          ui:options:
            catalogFilter:
              - kind: Group
                spec.type: team

        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          default: github.com?owner=broadinstitute
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - broadinstitute

        visibility:
          title: Repo Visibility
          type: string
          description: Should the repo be public or private?
          default: private
          enum:
            - public
            - private
          enumNames:
            - Public
            - Private

    - title: Terraform Configuration
      required:
        - gcpRegion
        - gcpProjectDev
        - gcpProjectProd
        - gcsBucket
      properties:
        gcpRegion:
          title: GCP Region
          type: string
          default: us-east4
          description: The default region for the Google provider

        # todo: ask if the user wants us to create the projects, and create project-dev and project-prod
        gcpProjectDev:
          title: Development GCP Project
          type: string
          description: GCP project managed by the default/primary provider. Prod and Dev should use different projects.

        gcpProjectProd:
          title: Production GCP Project
          type: string
          description: GCP project managed by the default/primary provider. Prod and Dev should use different projects.

        gcsBucket:
          title: GCS Bucket
          type: string
          default: broad-atlantis-terraform-prod
          description: The name of the GCS bucket used to store Terraform state files.

        googleProviderVersion:
          title: Google Provider Version
          type: string
          default: 6.18.1
          description: The version of the Google provider to use in the Terraform configuration.

        terraformVersion:
          title: Terraform Version
          type: string
          default: 1.10.5
          description: The version of Terraform to use in the Terraform configuration.

    - $yaml: ../defaults/parameters/pagerduty.yaml

  steps:
    - $yaml: ../defaults/steps/pagerduty.yaml

    - id: fetchTemplate
      name: Fetch Template
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          gcpRegion: ${{ parameters.gcpRegion }}
          gcpProjectDev: ${{ parameters.gcpProjectDev }}
          gcpProjectProd: ${{ parameters.gcpProjectProd }}
          gcsBucket: ${{ parameters.gcsBucket }}
          googleProviderVersion: ${{ parameters.googleProviderVersion }}
          terraformVersion: ${{ parameters.terraformVersion }}
          title: ${{ parameters.title }}
          repoOwner: >-
            ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.githubTeam | parseEntityRef | pick('name') }}

    - $yaml: ../defaults/steps/write-catalog.yaml
    - $yaml: ../defaults/steps/system.yaml
    - $yaml: ../defaults/steps/system-write.yaml
    - $yaml: ../defaults/steps/domain.yaml
    - $yaml: ../defaults/steps/domain-write.yaml
    - $yaml: ../defaults/steps/links.yaml
    - $yaml: ../defaults/steps/links-write.yaml
    - $yaml: ../defaults/steps/annotations/techdocs.yaml
    - $yaml: ../defaults/steps/annotations/techdocs-write.yaml
    - $yaml: ../defaults/steps/annotations/kubernetes.yaml
    - $yaml: ../defaults/steps/annotations/kubernetes-write.yaml
    - $yaml: ../defaults/steps/annotations/cloudbuild.yaml
    - $yaml: ../defaults/steps/annotations/cloudbuild-write.yaml
    - $yaml: ../defaults/steps/annotations/pagerduty.yaml
    - $yaml: ../defaults/steps/annotations/pagerduty-write.yaml
    - $yaml: ../defaults/steps/publish.yaml
    - $yaml: ../defaults/steps/register.yaml

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
