---
apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: terraform-control-module-template
  title: Terraform Control Module using a GCS Backend and Atlantis
  description: >-
    This template uses a "WET" approach, which involves organizing projects in a structured manner.
    Directories are used to divide different environments, and modifications to the code are implemented
    by duplicating files between directories. In this model, environment-specific data is kept in the
    `terraform.tfvars` file, while most other files remain identical. The template creates a new GitHub
    repository consisting of a Terraform project, a Backstage catalog entry, and configures Atlantis.
    Additionally, it sets the Google provider version and utilizes the shared GCS bucket for storing
    state information.

  tags:
    - terraform
    - recommended
spec:
  owner: group:devnull
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Project Information
      required:
        - name
        - description
        - type
        - lifecycle

      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component

        title:
          title: Title (optional)
          type: string
          description: >-
            The title of the component. This is a human-readable name for the component.
            If not provided, the name will be used as the title.

        description:
          title: Service description
          type: string

        type:
          title: Component type
          type: string
          default: service
          enum: ['service', 'website', 'resource', 'documentation', 'library', 'API']

        lifecycle:
          title: Service lifecycle
          type: string
          default: production
          enum: ['production', 'experimental', 'deprecated']
          description: >-
            The lifecycle phase of the service. e.g. "production", "experimental", "deprecated"

        system:
          title: System (optional)
          type: string
          description: >-
            A system is a collection of resources and components that share a common purpose.
            e.g. "search", "payments", "infrastructure", "data-platform"
        domain:
          title: Domain (optional)
          type: string
          description: >-
            The domain is collection of systems that share terminology, domain models, metrics, KPIs,
            business purpose, or documentation. i.e. they form a bounded context.
            e.g. "search", "payments", "infrastructure", "data-platform"

        kubernetesAnnotation:
          title: Kubernetes Annotation (optional)
          type: boolean
          default: false
          description: >-
            Add Backstage annotation for the Kubernetes resource. This is used to
            [identify the resource in Kubernetes]
            (https://backstage.io/docs/features/kubernetes/configuration#surfacing-your-kubernetes-components-as-part-of-an-entity).
            If true, the annotation will be added to the Kubernetes resource using the "name" field. Default is false.

        cloudbuildAnnotation:
          title: Cloud Build Annotation (optional)
          type: boolean
          default: false
          description: >-
            Add Backstage annotation for the Cloud Build resource. This is used to
            [identify the resource in Cloud Build]
            (https://github.com/backstage/backstage/tree/master/plugins/cloudbuild#add-annotations-to-your-component-infoyaml-file).
            If true, the annotation will be added to the Cloud Build resource using the "name" field. Default is false.

        addLink:
          title: Add a URL (optional)
          type: string
          description: >-
            Add a default [URL](https://backstage.io/docs/features/software-catalog/descriptor-format/#links-optional).
            If empty no link block will be added.

        tags:
          title: List of tags (optional)
          type: array
          default:
            - bits
            - bits-tools
            - terraform
          items:
            type: string
            title: Backstage Tags

    - title: Choose a location
      required:
        - githubTeam
        - repoUrl
      properties:
        githubTeam:
          title: GitHub Team
          type: string
          ui:field: OwnerPicker
          description: The GitHub team that owns the repository.
          ui:options:
            catalogFilter:
              - kind: Group
                spec.type: team

        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          default: github.com?owner=broadinstitute
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - broadinstitute

        visibility:
          title: Repo Visibility
          type: string
          description: Should the repo be public or private?
          default: private
          enum:
            - public
            - private
          enumNames:
            - Public
            - Private

    - title: Terraform Configuration
      required:
        - gcpRegion
        - gcpProjectDev
        - gcpProjectProd
        - gcsBucket
      properties:
        gcpRegion:
          title: GCP Region
          type: string
          default: us-east4
          description: The default region for the Google provider

        # todo: ask if the user wants us to create the projects, and create project-dev and project-prod
        gcpProjectDev:
          title: Development GCP Project
          type: string
          description: GCP project managed by the default/primary provider. Prod and Dev should use different projects.

        gcpProjectProd:
          title: Production GCP Project
          type: string
          description: GCP project managed by the default/primary provider. Prod and Dev should use different projects.

        gcsBucket:
          title: GCS Bucket
          type: string
          default: broad-atlantis-terraform-prod
          description: The name of the GCS bucket used to store Terraform state files.

        googleProviderVersion:
          title: Google Provider Version
          type: string
          default: 5.17.0
          description: The version of the Google provider to use in the Terraform configuration.

        terraformVersion:
          title: Terraform Version
          type: string
          default: 1.7.4
          description: The version of Terraform to use in the Terraform configuration.

    - $yaml: ../defaults/parameters/pagerduty.yaml

  steps:
    - $yaml: ../defaults/steps/pagerduty.yaml

    - id: fetchTemplate
      name: Fetch Template
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description | dump }}
          owner: ${{ parameters.githubTeam | parseEntityRef | pick('name') }}
          tags: ${{ parameters.tags }}
          type: ${{ parameters.type }}
          domain: ${{ parameters.domain }}
          system: ${{ parameters.system }}
          lifecycle: ${{ parameters.lifecycle }}
          githubRepo: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
          githubOrg: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}
          gcpRegion: ${{ parameters.gcpRegion }}
          gcpProjectDev: ${{ parameters.gcpProjectDev }}
          gcpProjectProd: ${{ parameters.gcpProjectProd }}
          gcsBucket: ${{ parameters.gcsBucket }}
          googleProviderVersion: ${{ parameters.googleProviderVersion }}
          terraformVersion: ${{ parameters.terraformVersion }}
          pagerdutyIntegrationKey: ${{ parameters.pagerdutyIntegrationKey or steps['pagerdutyService'].output.integrationKey }}
          # pagerdutyintegrationKey: ${{ steps['pagerdutyService'].output.integrationKey }}
          title: ${{ parameters.title }}
          kubernetesAnnotation: ${{ parameters.kubernetesAnnotation }}
          cloudbuildAnnotation: ${{ parameters.cloudbuildAnnotation }}
          addLink: ${{ parameters.addLink }}

    - $yaml: ../defaults/steps/publish.yaml
    - $yaml: ../defaults/steps/register.yaml

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
