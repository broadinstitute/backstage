---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: example-mono-template
  title: "Example: Onboard your service to Backstage"
  description: Create a new PR with your service's details.
  tags:
    - recommended

spec:
  owner: group:devnull
  type: service

  parameters:
    - title: What is your service about?
      required:
        - name
        - description
        - type
        - lifecycle
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component

        title:
          title: Title (optional)
          type: string
          description: |
            The title of the component. This is a human-readable name for the component.
            If not provided, the name will be used as the title.

        description:
          title: Service description
          type: string

        type:
          title: Component type
          type: string
          default: service
          enum:
            - Service
            - Website
            - Resource
            - Documentation
            - Library
            - API

        lifecycle:
          title: Service lifecycle
          type: string
          default: production
          enum:
            - production
            - experimental
            - deprecated
          description: |
            The lifecycle phase of the service. e.g. "production", "experimental", "deprecated"

        system:
          title: System (optional)
          type: string
          description: |
            A system is a collection of resources and components that share a common purpose.
            e.g. "search", "payments", "infrastructure", "data-platform"
        domain:
          title: Domain (optional)
          type: string
          description: |
            The domain is collection of systems that share terminology, domain models, metrics, KPIs,
            business purpose, or documentation. i.e. they form a bounded context.
            e.g. "search", "payments", "infrastructure", "data-platform"

        # The Annotation Parameters can probably be replaced with this at some point
        # https://backstage.io/docs/features/software-templates/input-examples/#boolean-multiple-options

        addLink: # make this an optional boolean that populates an object
          title: Add a URL (optional)
          type: boolean
          default: false
          description: |
            Add a default [URL](https://backstage.io/docs/features/software-catalog/descriptor-format/#links-optional).
            If empty no link block will be added.

        addAnnotations:
          title: Add misc
          type: boolean
          default: false
          description: |
            foo

      dependencies:
        addAnnotations:
          allOf:
            - if:
                properties:
                  addAnnotations:
                    enum:
                      - true
              then:
                properties:
                  techDocsAnnotation:
                    title: Techdocs Annotation (optional)
                    type: boolean
                    default: false
                    description: |
                      Add Backstage annotation for TechDocs. This is used to
                      generate docs in backstage based on markdown files in the `docs`
                      directory in the root of the repo.

                  kubernetesAnnotation:
                    title: Kubernetes Annotation (optional)
                    type: boolean
                    default: false
                    description: |
                      Add Backstage annotation for the Kubernetes resource. This is used to
                      [identify the resource in Kubernetes]
                      (https://backstage.io/docs/features/kubernetes/configuration#surfacing-your-kubernetes-components-as-part-of-an-entity).
                      If true, the annotation will be added to the Kubernetes resource using the "name" field. Default is false.

                  cloudbuildAnnotation:
                    title: Cloud Build Annotation (optional)
                    type: boolean
                    default: false
                    description: |
                      Add Backstage annotation for the Cloud Build resource. This is used to
                      [identify the resource in Cloud Build]
                      (https://github.com/backstage/backstage/tree/master/plugins/cloudbuild#add-annotations-to-your-component-infoyaml-file).
                      If true, the annotation will be added to the Cloud Build resource using the "name" field. Default is false.

        addLink:
          allOf:
            - if:
                properties:
                  addLink:
                    enum:
                      - true
              then:
                properties:
                  link:
                    type: object
                    properties:
                      url:
                        type: string
                      title:
                        type: string
                      icon:
                        type: string
                        default: dashboard

        tags:
          title: List of tags (optional)
          type: array
          default:
            - bits
            - bits-tools
          items:
            type: string
            title: Backstage Tags

    - title: Choose a location
      required:
        - githubTeam
        - repoUrl
      properties:
        githubTeam:
          title: GitHub Team
          type: string
          ui:field: OwnerPicker
          description: The GitHub team that owns the repository.
          ui:options:
            catalogFilter:
              - kind: Group
                spec.type: team

        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          default: github.com?owner=broadinstitute
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - broadinstitute

    - title: Integrations (optional)
      properties:
        pagerdutyIntegrationKey:
          title: PagerDuty integration key
          type: string

  steps:
    - action: catalog:write
      id: create-catalog-info-file
      name: Create catalog file
      input:
        entity:
          apiVersion: backstage.io/v1alpha1
          kind: ${{ parameters.type if parameters.type == 'API' or parameters.type == 'Resource' else 'Component' }}
          metadata:
            name: ${{ parameters.name }}
            description: ${{ values.description }}
            links:
              - url: ${{ parameters.link.url }}
                title: ${{ parameters.link.title }}
                icon: ${{ parameters.link.icon }}
            tags: ${{ parameters.tags }} # loop through a list of tags? #todo

            annotations:
              github.com/project-slug: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}

          spec:
            type: ${{ parameters.type | lower }}
            lifecycle: ${{ parameters.lifecycle }}
            owner: ${{ parameters.githubTeam | parseEntityRef | pick('name') }}
    #         system: ${{ parameters.system }}
    #         domain: ${{ parameters.domain }} # todo set to a default value

# Add annotations to the catalog-info.yaml file if the user has selected to add them

    - id: techdocsAnnotation
      name: Add TechDocs Annotation
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.techDocsAnnotation == true }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "metadata": { "annotations": $merge([metadata.annotations, { "backstage.io/techdocs-ref": "dir:." }]) } } |'

    - id: docsWriteFile
      name: Add TechDocs Annotation
      action: roadiehq:utils:fs:write
      if: ${{ parameters.techDocsAnnotation == true }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['techdocsAnnotation'].output.result }}


    - id: kubernetesAnnotation
      name: Kubernetes Annotation
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.kubernetesAnnotation == true }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "metadata": { "annotations": $merge([metadata.annotations, { "backstage.io/kubernetes-id": "${{ parameters.name }}" }]) } } |'

    - id: kubeWriteFile
      name: Add Kubernetes Annotation
      action: roadiehq:utils:fs:write
      if: ${{ parameters.kubernetesAnnotation == true }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['kubernetesAnnotation'].output.result }}

    - id: cloudbuildAnnotation
      name: Cloud Build Annotation
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.cloudbuildAnnotation == true }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "metadata": { "annotations": $merge([metadata.annotations, { "google.com/cloudbuild-repo-name": "${{ parameters.name }}", "google.com/cloudbuild-project-slug": "bits-gke-clusters", "google.com/cloudbuild-location": "us-east4" }]) } } |'

    - id: cloudbuildWriteFile
      name: Add Cloud Build Annotation
      action: roadiehq:utils:fs:write
      if: ${{ parameters.cloudbuildAnnotation == true }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['cloudbuildAnnotation'].output.result }}

    - action: debug:log
      id: write-workspace-directory
      name: List the workspace directory with file contents
      input:
        listWorkspace: true

    # - id: fetchTemplate
    #   action: fetch:template
    #   input:
    #     url: ./content
    #     values:
    #       name: ${{ parameters.name }}
    #       description: ${{ parameters.description | dump }}
    #       owner: ${{ parameters.githubTeam | parseEntityRef | pick('name') }}
    #       tags: ${{ parameters.tags }}
    #       type: ${{ parameters.type }}
    #       domain: ${{ parameters.domain }}
    #       system: ${{ parameters.system }}
    #       githubRepo: ${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
    #       githubOrg: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}
    #       pagerdutyIntegrationKey: ${{ parameters.pagerdutyIntegrationKey }}
    #       lifecycle: ${{ parameters.lifecycle }}
    #       title: ${{ parameters.title }}
    #       kubernetesAnnotation: ${{ parameters.kubernetesAnnotation }}
    #       cloudbuildAnnotation: ${{ parameters.cloudbuildAnnotation }}
    #       addLink: ${{ parameters.addLink }}

    # - id: createPullRequest
    #   name: createPullRequest
    #   action: publish:github:pull-request
    #   input:
    #     repoUrl: ${{ parameters.repoUrl }}
    #     branchName: backstage-integration
    #     title: 'feat: Onboard service to Catalog'
    #     description: This PR adds a metadata file about this service so that it can be registered in our software catalog.

  output:
    links:
      - title: View the pull request on GitHub
        icon: github
        url: ${{ steps['createPullRequest'].output.remoteUrl }}
