---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: example-mono-template
  title: "Example: Onboard your service to Backstage"
  description: Create a new PR with your service's details.
  tags:
    - recommended

spec:
  owner: group:devnull
  type: service

  parameters:
    # Start parameters/resource-info.yaml
    - title: Backstage Resource Information
      required:
        - name
        - description
        - type
        - lifecycle
      properties:
        name:
          title: Name
          type: string
          description: >-
            A unique identifier for the component. This is how it will be
            identified in Backstage.

        title:
          title: Title
          type: string
          description: >-
            This is a human-readable name for easier discoverability Backstage.
            If not provided, the name will be used as the title.

        description:
          title: Service description
          type: string
          description: >-
            This will be viewable in the resource overview in Backstage.

        type:
          title: Component type
          type: string
          description: >-
            A high-level category for sorting resources in [Backstage](https://backstage.broadinstitute.org/catalog/default/component/backstage/docs/catalog/#component).
          default: service
          enum:
            - Service
            - Website
            - Resource
            - Documentation
            - Library
            - API

        lifecycle:
          title: Service lifecycle
          type: string
          default: production
          enum:
            - production
            - experimental
            - deprecated
          description: >-
            A tag describing if/how the component is being used.

        system:
          title: System
          type: string
          description: >-
            A system is a collection of resources and components that share a
            common purpose such as "search", "payments", or "infrastructure".
            It should be a pre-existing resource in Backstage. If you don't
            know what to put here, leave it blank.
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: System

        domain:
          title: Domain
          type: string
          description: >-
            The domain is collection of systems that share terminology, domain models, metrics, KPIs,
            business purpose, or documentation. i.e. they form a bounded context.
            e.g. "search", "payments", "infrastructure", "data-platform"
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Domain

        tags:
          title: List of tags
          type: array
          description: >-
            Arbitrary strings to better sort and find resources in Backstage.
          default:
            - gcp
          items:
            type: string
            title: Backstage Tags

        addLink:
          title: Add a URL
          type: boolean
          default: false
          description: >-
            Add a default [URL](https://backstage.io/docs/features/software-catalog/descriptor-format/#links-optional).
            If empty no link block will be added.

      dependencies:
        addLink:
          allOf:
            - if:
                properties:
                  addLink:
                    enum:
                      - true
              then:
                properties:
                  link:
                    type: object
                    properties:
                      url:
                        type: string
                      title:
                        type: string
                      icon:
                        type: string
                        default: dashboard
    # End parameters/resource-info.yaml
    # Start parameters/annotations.yaml
    - title: Add annotations
      description: >-
        Add annotations to the catalog-info.yaml file to enable additional
        functionality to your component.
      properties:
        techDocsAnnotation:
          title: Techdocs Annotation
          type: boolean
          default: false
          description: >-
            Add Backstage annotation for TechDocs. This is used to
            generate docs in backstage based on markdown files in the `docs`
            directory in the root of the repo.

        kubernetesAnnotation:
          title: Kubernetes Annotation
          type: boolean
          default: false
          description: >-
            Add Backstage annotation for the Kubernetes resource. This is used to
            [identify the resource in Kubernetes](https://backstage.io/docs/features/kubernetes/configuration#surfacing-your-kubernetes-components-as-part-of-an-entity).
            If true, the annotation will be added to the Kubernetes resource using the "name" field. Default is false.

        cloudbuildAnnotation:
          title: Cloud Build Annotation
          type: boolean
          default: false
          description: >-
            Add Backstage annotation for the Cloud Build resource. This is used to
            [identify the resource in Cloud Build](https://github.com/backstage/backstage/tree/master/plugins/cloudbuild#add-annotations-to-your-component-infoyaml-file).
            If true, the annotation will be added to the Cloud Build resource using the "name" field. Default is false.
    # End parameters/annotations.yaml

    - title: Github settings
      required:
        - githubTeam
        - repoUrl
      properties:
        githubTeam:
          title: GitHub Team
          type: string
          ui:field: OwnerPicker
          description: The GitHub team that owns the repository.
          ui:options:
            catalogFilter:
              - kind: Group
                spec.type: team

        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          default: github.com?owner=broadinstitute
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - broadinstitute

    # Start parameters/pagerduty.yaml
    - title: PagerDuty Integration
      properties:
        createPagerduty:
          title: Create PagerDuty Service
          description: >-
            Check box to create a new PagerDuty service for this component.
            If you already have a key, you can input it below.
            If you don't want to use the PagerDuty integration, leave the field blank.
          type: boolean
          default: false

      dependencies:
        createPagerduty:
          oneOf:
            - properties:
                createPagerduty:
                  enum:
                    - true

                escalationPolicyId:
                  title: Escalation Policy ID
                  type: string
                  description: The ID of the escalation policy to associate with the service
                  ui:field: SelectFieldFromApi
                  ui:options:
                    title: PagerDuty Escalation Policy
                    description: Select an escalation policy from PagerDuty
                    path: 'pagerduty/escalation_policies'
                    labelSelector: 'label'
                    valueSelector: 'value'
                    placeholder: '---'
                alertGrouping:
                  title: Alert Grouping
                  type: string
                  description: Reduce noise by grouping similar alerts - Defaults to 'None'.
                  enum:
                    - 'time'
                    - 'intelligent'
                    - 'content_based'
                  enumNames:
                    - 'Time-based grouping'
                    - 'Intelligent grouping'
                    - 'Content-based grouping'


            - properties:
                createPagerduty:
                  enum:
                    - false
                pagerdutyIntegrationKey:
                  title: PagerDuty integration key
                  description: This value is ignored if you selected "Yes" for the previous question.
                  type: string
    # End parameters/pagerduty.yaml
  steps:
    # Start steps/write-catalog.yaml
    - action: catalog:write
      id: create-catalog-info-file
      name: Create catalog file
      input:
        entity:
          apiVersion: backstage.io/v1alpha1
          kind: ${{ parameters.type if parameters.type == 'API' or parameters.type == 'Resource' else 'Component' }}
          metadata:
            name: ${{ parameters.name }}
            description: ${{ parameters.description }}
            links:
              - url: ${{ parameters.link.url }}
                title: ${{ parameters.link.title }}
                icon: ${{ parameters.link.icon }}
            tags: ${{ parameters.tags }}
            annotations:
              github.com/project-slug: ${{ parameters.repoUrl | parseRepoUrl | pick('owner') }}/${{ parameters.repoUrl | parseRepoUrl | pick('repo') }}
          spec:
            type: ${{ parameters.type | lower }}
            lifecycle: ${{ parameters.lifecycle }}
            owner: ${{ parameters.githubTeam | parseEntityRef | pick('name') }}
    # End steps/write-catalog.yaml
    # Add annotations to the catalog-info.yaml file if the user has selected to add them
    # Start steps/annotations/<name>.yaml
    - id: addSystem
      name: Add System to catalog-info.yaml
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.system }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "spec": { "system": "${{ parameters.system | parseEntityRef | pick("name") }}" } } |'

    - id: systemWriteFile
      name: Update catalog-info.yaml with System
      action: roadiehq:utils:merge
      if: ${{ parameters.system }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['addSystem'].output.result }}

    - id: addDomain
      name: Add Domain to catalog-info.yaml
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.domain }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "spec": { "domain": "${{ parameters.domain | parseEntityRef | pick("name") }}" } } |'

    - id: domainWriteFile
      name: Update catalog-info.yaml with Domain
      action: roadiehq:utils:merge
      if: ${{ parameters.domain }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['addDomain'].output.result }}

    - id: techdocsAnnotation
      name: TechDocs Annotation
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.techDocsAnnotation == true }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "metadata": { "annotations": $merge([metadata.annotations, { "backstage.io/techdocs-ref": "dir:." }]) } } |'

    - id: docsWriteFile
      name: Add TechDocs Annotation
      action: roadiehq:utils:merge
      if: ${{ parameters.techDocsAnnotation == true }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['techdocsAnnotation'].output.result }}

    - id: kubernetesAnnotation
      name: Kubernetes Annotation
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.kubernetesAnnotation == true }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "metadata": { "annotations": $merge([metadata.annotations, { "backstage.io/kubernetes-id": "${{ parameters.name }}" }]) } } |'

    - id: kubeWriteFile
      name: Add Kubernetes Annotation
      action: roadiehq:utils:merge
      if: ${{ parameters.kubernetesAnnotation == true }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['kubernetesAnnotation'].output.result }}

    - id: cloudbuildAnnotation
      name: Cloud Build Annotation
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.cloudbuildAnnotation == true }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "metadata": { "annotations": $merge([metadata.annotations, { "google.com/cloudbuild-repo-name": "${{ parameters.name }}", "google.com/cloudbuild-project-slug": "bits-gke-clusters", "google.com/cloudbuild-location": "us-east4" }]) } } |'

    - id: cloudbuildWriteFile
      name: Add Cloud Build Annotation
      action: roadiehq:utils:merge
      if: ${{ parameters.cloudbuildAnnotation == true }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['cloudbuildAnnotation'].output.result }}

    - id: pagerDutyAnnotation
      name: PagerDuty Annotation
      action: roadiehq:utils:jsonata:yaml:transform
      if: ${{ parameters.pagerdutyIntegrationKey != null }}
      input:
        path: catalog-info.yaml
        expression: '$ ~> | $ | { "metadata": { "annotations": $merge([metadata.annotations, { "pagerduty.com/integration-key": "${{ parameters.pagerdutyIntegrationKey }}", "google.com/cloudbuild-project-slug": "bits-gke-clusters", "google.com/cloudbuild-location": "us-east4" }]) } } |'

    - id: pagerDutyWriteFile
      name: Add PagerDuty Annotation
      action: roadiehq:utils:merge
      if: ${{ parameters.pagerdutyIntegrationKey != null }}
      input:
        path: catalog-info.yaml
        content: ${{ steps['pagerDutyAnnotation'].output.result }}
    # End steps/annotations/<name>.yaml
    # todo: delete the debug:log action
    - action: debug:log
      id: write-workspace-directory
      name: List the workspace directory with file contents
      input:
        listWorkspace: true

    - id: createPullRequest
      name: createPullRequest
      action: publish:github:pull-request
      input:
        repoUrl: ${{ parameters.repoUrl }}
        branchName: backstage-integration
        title: 'feat: Onboard service to Catalog'
        description: This PR adds a metadata file about this service so that it can be registered in our software catalog.

  output:
    links:
      - title: View the pull request on GitHub
        icon: github
        url: ${{ steps['createPullRequest'].output.remoteUrl }}
